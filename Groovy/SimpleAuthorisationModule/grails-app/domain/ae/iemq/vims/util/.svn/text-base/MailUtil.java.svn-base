/*
 * Copyright (c) IeMQ.
 * All rights reserved.
 */
package ae.iemq.vims.util;

import java.io.File;
import java.util.Date;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Address;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

/**
 * The MailUtil class implements JavaMail API for sending email through SMTP protocol.
 */
public class MailUtil {
	
    /**
     * Sends mail.
     * @param aSmtpHost The smtp host.
     * @param aFrom The from address.
     * @param aRecipient The recipient address.
     * @param aSubject The message subject.
     * @param aText The message text.
     * @throws AddressException If an unhandled exception occurs.
     * @throws MessagingException If an unhandled exception occurs.
     */
    public static void mail(
        final String aSmtpHost,
        final String aFrom,
        final String aRecipient,
        final String aSubject,
        final String aText)
        throws AddressException, MessagingException {

        mail(aSmtpHost,
            aFrom,
            new String[] {aRecipient},
            aSubject,
            aText,
            (File[]) null);
    }

    /**
     * Sends mail.
     * @param aSmtpHost The smtp host.
     * @param aFrom The from address.
     * @param aRecipient The recipient address.
     * @param aSubject The message subject.
     * @param aText The message text.
     * @param aAttachment The attachment.
     * @throws AddressException If an unhandled exception occurs.
     * @throws MessagingException If an unhandled exception occurs.
     */
    public static void mail(
        final String aSmtpHost,
        final String aFrom,
        final String aRecipient,
        final String aSubject,
        final String aText,
        final File aAttachment)
        throws AddressException, MessagingException {

        mail(aSmtpHost,
            aFrom,
            new String[] {aRecipient},
            aSubject,
            aText,
            new File[] {aAttachment});
    }

    /**
     * Sends mail.
     * @param aSmtpHost The smtp host.
     * @param aFrom The from address.
     * @param aRecipient The recipient address.
     * @param aSubject The message subject.
     * @param aText The message text.
     * @param aAttachments The attachments.
     * @throws AddressException If an unhandled exception occurs.
     * @throws MessagingException If an unhandled exception occurs.
     */
    public static void mail(
        final String aSmtpHost,
        final String aFrom,
        final String aRecipient,
        final String aSubject,
        final String aText,
        final File[] aAttachments)
        throws AddressException, MessagingException {

        mail(aSmtpHost,
            aFrom,
            new String[] {aRecipient},
            aSubject,
            aText,
            aAttachments);
    }

    /**
     * Sends mail.
     * @param aSmtpHost The smtp host.
     * @param aFrom The from address.
     * @param aRecipients The recipient addresses.
     * @param aSubject The message subject.
     * @param aText The message text.
     * @throws AddressException If an unhandled exception occurs.
     * @throws MessagingException If an unhandled exception occurs.
     */
    public static void mail(
        final String aSmtpHost,
        final String aFrom,
        final String[] aRecipients,
        final String aSubject,
        final String aText)
        throws AddressException, MessagingException {

        mail(aSmtpHost,
        	aFrom,
            aRecipients,
            aSubject,
            aText,
            (File[]) null);
    }

    /**
     * Sends mail.
     * @param aSmtpHost The smtp host.
     * @param aFrom The from address.
     * @param aRecipients The recipient addresses.
     * @param aSubject The message subject.
     * @param aText The message text.
     * @param aAttachment The attachment.
     * @throws AddressException If an unhandled exception occurs.
     * @throws MessagingException If an unhandled exception occurs.
     */
    public static void mail(
        final String aSmtpHost,
        final String aFrom,
        final String[] aRecipients,
        final String aSubject,
        final String aText,
        final File aAttachment)
        throws AddressException, MessagingException {

        mail(aSmtpHost,
            aFrom,
            aRecipients,
            aSubject,
            aText,
            new File[] {aAttachment});
    }

    /**
     * Sends mail.
     * @param aSmtpHost The smtp host.
     * @param aFrom The from address.
     * @param aRecipients The recipient addresses.
     * @param aSubject The message subject.
     * @param aText The message text.
     * @param aAttachments The attachments.
     * @throws AddressException If an unhandled exception occurs.
     * @throws MessagingException If an unhandled exception occurs.
     */
    public static void mail(
        final String aSmtpHost,
        final String aFrom,
        final String[] aRecipients,
        final String aSubject,
        final String aText,
        final File[] aAttachments)
        throws AddressException, MessagingException {

    	
    	/*
    	 * Set mail server property, email addresses, email body
    	 * and attachments if available. 
    	 */
        Properties vProperties = new Properties();
        vProperties.put("mail.smtp.host", aSmtpHost);
        Address[] vAddresses = new Address[aRecipients.length];
        for (int i = 0; i < vAddresses.length; i++) {
            vAddresses[i] = new InternetAddress(aRecipients[i]);
        }
        Multipart vMultipart = new MimeMultipart();
        MimeBodyPart vMimeBodyPart = new MimeBodyPart();
        vMimeBodyPart.setContent(aText, "text/plain");
        vMultipart.addBodyPart(vMimeBodyPart);
        if (aAttachments != null) {
            for (int j = 0; j < aAttachments.length; j++) {
                vMimeBodyPart = new MimeBodyPart();
                FileDataSource vFileDataSource = new FileDataSource(aAttachments[j]);
                vMimeBodyPart.setDataHandler(new DataHandler(vFileDataSource));
                vMimeBodyPart.setFileName(aAttachments[j].getName());
                vMultipart.addBodyPart(vMimeBodyPart);
            }
        }
        
        /*
         * Get session and create an instant of message and set
         * the properties to send email.
         */
        Session vSession = Session.getDefaultInstance(vProperties);
        MimeMessage vMimeMessage = new MimeMessage(vSession);
        vMimeMessage.setSentDate(new Date());
        vMimeMessage.setFrom(new InternetAddress(aFrom));
        vMimeMessage.setRecipients(Message.RecipientType.TO, vAddresses);
        vMimeMessage.setSubject(aSubject);
        vMimeMessage.setContent(vMultipart);
        Transport.send(vMimeMessage);
    }
    
    /**
     * Sends mail.
     * @param aSmtpHost The smtp host.
     * @param String aSmtpPort The smtp port.
     * @param String aUserName The smtp user name.
     * @param String aPassword The smtp password.
     * @param aFrom The from address.
     * @param aRecipients The recipient addresses.
     * @param aSubject The message subject.
     * @param aText The message text.
     * @param aAttachments The attachments.
     * @throws AddressException If an unhandled exception occurs.
     * @throws MessagingException If an unhandled exception occurs.
     */
    
    public static void mail(
        final String aSmtpHost,
        final String aSmtpPort,
        final String aUserName,
        final String aPassword,
        final String aFrom,
        final String[] aRecipients,
        final String aSubject,
        final String aText,
        final File[] aAttachments)
        throws AddressException, MessagingException {

    	
    	/*
    	 * Set mail server property, email addresses, email body
    	 * and attachments if available. 
    	 */
        Properties vProperties = new Properties();
        vProperties.put("mail.smtp.host", aSmtpHost);
        vProperties.put("mail.smtp.port", aSmtpPort);
        vProperties.put("mail.smtp.auth", "true");
        vProperties.put("mail.smtp.user", aUserName);
        Address[] vAddresses = new Address[aRecipients.length];
        for (int i = 0; i < vAddresses.length; i++) {
            vAddresses[i] = new InternetAddress(aRecipients[i]);
        }
        Multipart vMultipart = new MimeMultipart();
        MimeBodyPart vMimeBodyPart = new MimeBodyPart();
        vMimeBodyPart.setContent(aText, "text/plain");
        vMultipart.addBodyPart(vMimeBodyPart);
        if (aAttachments != null) {
            for (int j = 0; j < aAttachments.length; j++) {
                vMimeBodyPart = new MimeBodyPart();
                FileDataSource vFileDataSource = new FileDataSource(aAttachments[j]);
                vMimeBodyPart.setDataHandler(new DataHandler(vFileDataSource));
                vMimeBodyPart.setFileName(aAttachments[j].getName());
                vMultipart.addBodyPart(vMimeBodyPart);
            }
        }
        
        /*
         * Get session and create an instant of message and set
         * the properties to send email.
         */
        Session vSession = Session.getDefaultInstance(vProperties);
        
        MimeMessage vMimeMessage = new MimeMessage(vSession);
        vMimeMessage.setSentDate(new Date());
        vMimeMessage.setFrom(new InternetAddress(aFrom));
        vMimeMessage.setRecipients(Message.RecipientType.TO, vAddresses);
        vMimeMessage.setSubject(aSubject);
        vMimeMessage.setContent(vMultipart);
        Transport.send(vMimeMessage);
        Transport trans = vSession.getTransport("smtp");
        trans.connect(aSmtpHost,aUserName,aPassword);
        
        
        vMimeMessage.saveChanges();
        trans.send(vMimeMessage);
        trans.close();
    }
    
}
