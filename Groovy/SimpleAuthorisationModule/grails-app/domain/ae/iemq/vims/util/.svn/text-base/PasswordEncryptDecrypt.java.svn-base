/**
 * 
 */
package ae.iemq.vims.util;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

/**
 * @author k.jaladi
 * 
 */

public class PasswordEncryptDecrypt {
	static Cipher ecipher;

	static Cipher dcipher;

	public static final String algorithm = "Blowfish";

	static {
		byte[] ourSecretKeyBytes = "VIMS".getBytes();
		SecretKeySpec key = new SecretKeySpec(ourSecretKeyBytes, algorithm);
		try {
			ecipher = Cipher.getInstance("Blowfish");
			ecipher.init(Cipher.ENCRYPT_MODE, key);
			dcipher = Cipher.getInstance("Blowfish");
			dcipher.init(Cipher.DECRYPT_MODE, key);
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (NoSuchPaddingException e) {
			e.printStackTrace();
		} catch (InvalidKeyException e) {
			e.printStackTrace();
		}
	}

	public static String encrypt(String sourceStr) {

		byte[] enc;
		try {
			enc = ecipher.doFinal((new String(sourceStr)).getBytes("UTF-8"));
			// Encode bytes to base64 to get a string
			return new sun.misc.BASE64Encoder().encode(enc);
		} catch (IllegalBlockSizeException e) {
			e.printStackTrace();
		} catch (BadPaddingException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}

		return null;
	}

	public static String decrypt(String sourceStr) {
		try {
			// Decode base64 to get bytes
			byte[] dec = new sun.misc.BASE64Decoder().decodeBuffer(sourceStr);
			// Decrypt data in a single step
			byte[] utf8 = dcipher.doFinal(dec);
			// Decode using utf-8
			return new String(utf8, "UTF-8");
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return null;
	}
}
